@startuml
'https://plantuml.com/class-diagram

interface TeacherService
interface InformService

interface InformDao

class TeacherServiceImpl
class InformServiceImpl

'class TeacherController

TeacherService <|.. TeacherServiceImpl
InformService <|.. InformServiceImpl
'TeacherService <. TeacherController
InformDao <.. InformServiceImpl
InformService <. TeacherServiceImpl

interface TeacherService {
    loadUserByUsername(String) : UserDetails
    updateUser(User) : Integer
    selectUserById(Integer) : User
    updatePassword(User) : Integer
    selectUserByRealname(String) : User
    teachCourseById(String)) : Integer
    pushInform(Map<String, Object>) : Integer
    checkSubmition(Map<String, Object>) : Map<String, Object>
    askForSubmition(Map<String, Object>) : Map<String, Object>
    checkDuplication(Map<String, Object>) : Map<String, Object>
}

class TeacherServiceImpl {
    teacherDao : TeacherDao
    informService : InformService
    courseService : CourseService
    fileService : FileService

    loadUserByUsername(String) : UserDetails
    updateUser(User) : Integer
    selectUserById(Integer) : User
    updatePassword(User) : Integer
    selectUserByRealname(String) : User
    teachCourseById(String)) : Integer
    pushInform(Map<String, Object>) : Integer
    checkSubmition(Map<String, Object>) : Map<String, Object>
    askForSubmition(Map<String, Object>) : Map<String, Object>
    checkDuplication(Map<String, Object>) : Map<String, Object>
}

interface InformService {
    pushInform(Inform) : Integer
    delInform(String) : Integer
    getInformByTeacher(String) : List<Inform>
    getInformByCourse(String) : List<Inform>
}
class InformServiceImpl {
    informDao : InformDao
    pushInform(Inform) : Integer
    delInform(String) : Integer
    getInformByTeacher(String) : List<Inform>
    getInformByCourse(String) : List<Inform>
}
interface InformDao {
    pushInform(Inform) : Integer
    delInform(String) : Integer
    getInformByTeacher(String) : List<Inform>
    getInformByCourse(String) : List<Inform>
}
'class TeacherController {
'    teacherService : TeacherService
'
'        updateUser(User) : Integer
'        selectUserById(Integer) : User
'        updatePassword(User) : Integer
'        selectUserByRealname(String) : User
'        teachCourseById(String)) : Integer
'        pushInform(Map<String, Object>) : Integer
'        checkSubmition(Map<String, Object>) : Map<String, Object>
'        askForSubmition(Map<String, Object>) : Map<String, Object>
'        checkDuplication(Map<String, Object>) : Map<String, Object>
'}


@enduml